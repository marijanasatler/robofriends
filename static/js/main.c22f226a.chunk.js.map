{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","Actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onReqestRobots","searchField","onSearchChange","isPanding","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c22f226a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card =({name,email,id}) => {\r\n\treturn(\r\n\t<div className='tc bg-light-green dib br3 ma2 grow bw2 shadow-5'>\r\n\t  <img alt='robots'src={`https://robohash.org/${id}?size=200x200`} />\r\n\t   <div>\r\n\t  \t<h2>{name}</h2>\r\n\t  \t <p>{email}</p>\r\n\t   </div>\t\r\n\t</div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from'./Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t {\r\n\t\t  robots.map((user,i) => {\r\n\t\t  \treturn(\r\n\t\t      <Card \r\n\t\t      key={i} \r\n\t          id={robots[i].id} \r\n\t          name={robots[i].name} \r\n\t          email={robots[i].email}\r\n\t          />\r\n\t          );\r\n\t\t   })\r\n\t\t}\r\n\t\t</div>\r\n\t);\r\n\t}\t\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox =({searchfield,searchChange}) => {\r\n\treturn(\r\n\t<div className='pa2'>\r\n\t\t<input \r\n\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\ttype='search' \r\n\t\tplaceholder='search robots'\r\n\t\tonChange={searchChange}\r\n\t\t/>\r\n\t</div>\r\n );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll =(props) =>{\r\n\treturn (\r\n\t<div style={{overflow:'scroll',border:'1px solid black',height:'800px'}}>\r\n\t\t{props.children}\t\r\n\t</div>\r\n );\r\n};\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\thasError:false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n    \tthis.setState({hasError:true})\r\n    }\r\n\r\n\r\n    render(){\r\n    \tif(this.state.hasError){\r\n    \t\treturn <h1> Ooops. That is not good </h1>\r\n    \t}\r\n    \treturn this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\nimport{connect} from 'react-redux';\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from'../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nimport {setSearchField,requestRobots} from'../Actions';\r\n\r\nconst mapStateToProps= state =>{\r\n\treturn{\r\n\t\tsearchField:state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPanding:state.requestRobots.isPanding,\r\n\t\terror:state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatcToProps =(dispatch) =>{\r\n\r\n\treturn{\r\n\t\tonSearchChange:(event)=>dispatch(setSearchField(event.target.value)),\r\n\t\tonReqestRobots:()=>dispatch(requestRobots())\r\n }\r\n}\r\n\r\nclass App extends Component {\r\n\t\r\n\tcomponentDidMount(){ \r\n\t\tthis.props.onReqestRobots();\r\n\r\n\t}\r\n\t\r\n\trender(){\r\n\t        const {searchField,onSearchChange,robots,isPanding}=this.props;\r\n\t\t\tconst filteredRobots =robots.filter(robot =>{\r\n\t \t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t \t}\t)\r\n\treturn isPanding ? \r\n\t\t<h1>loading</h1>:\r\n\t\t(\r\n     <div className='tc'>\r\n\t\t<h1 className='f1 '>RoboFriends</h1>\r\n\t\t<SearchBox searchChange={onSearchChange} />\r\n\t\t<Scroll>\r\n\t\t<ErrorBoundry>\r\n\t\t<CardList robots={filteredRobots}/>\r\n\t\t</ErrorBoundry>\r\n\t\t</Scroll>\r\n\t</div>\r\n    );\r\n   }\r\n }\r\n\r\nexport default connect(mapStateToProps,mapDispatcToProps)(App);","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n\r\n} from'./constants';\r\n\r\nexport const setSearchField=(text)=>({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload:text    })               \r\n\r\nexport const requestRobots=()=>(dispatch) =>{\r\n\tdispatch({type:REQUEST_ROBOTS_PENDING});\r\n\tfetch ('https://jsonplaceholder.typicode.com/users')                                    \r\n\t\t.then(response =>response.json())\r\n\t\t.then(data=>dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n\t\t.catch(error=>({type:REQUEST_ROBOTS_FAILED,payload:error}))}\r\n\r\n","export const CHANGE_SEARCH_FIELD ='CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n\r\n} from'./constants';\r\n\r\nconst initialStateSearch={\r\n\tsearchField:''\r\n}\r\n\r\nexport const searchRobots=(state=initialStateSearch,action={})=>{\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\treturn Object.assign({},state,{searchField:action.payload});\r\n\t\tdefault:\r\n\t\treturn state\r\n    }\r\n}\r\nconst initialStateRobots={\r\n   isPanding:true,\r\n   robots:[],\r\n}\r\n\r\nexport const requestRobots=(state=initialStateRobots,action={})=>{\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t return Object.assign({},state,{isPanding:true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t return Object.assign({},state,{robots:action.payload,isPanding:false})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t return Object.assign({},state,{error:action.payload})\r\n\t\tdefault:\r\n\t\treturn state\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore,combineReducers,applyMiddleware} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport{ createLogger} from 'redux-logger';\nimport './index.css';\nimport App from'./containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport {requestRobots,searchRobots} from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer=combineReducers({searchRobots,requestRobots})\nconst store= createStore(rootReducer,applyMiddleware( thunkMiddleware,logger))\n\nReactDOM.render(\n\t<Provider store={store}>\n\t<App />\n\t</Provider>\n\t,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}